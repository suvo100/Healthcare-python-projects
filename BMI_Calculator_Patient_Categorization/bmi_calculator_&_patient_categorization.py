# -*- coding: utf-8 -*-
"""BMI Calculator & Patient Categorization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LtncEuukaRtXlGR1_lhrncSMZuaudDFR

### Step 1: Create a new dataset manually
"""

pip install Faker

# To create random names, weights and heights. We can use faker function in Numpy

import numpy as np
import pandas as pd
from faker import Faker
fake = Faker()

# Generate 20 fake patients
n = 20
patients = [fake.name() for i in range(n)]
weights = np.random.randint(45, 100, n) # kg
heights = np.random.randint(140, 220, n) # cm

df_data = pd.DataFrame({
    "Patient Name":patients,
    "Weights (kg)": weights,
    "Heights (cm)": heights
})
df_data.to_csv("patients_data.csv", index=False)
print(df_data.head())

"""index = true gives includes index number when converting from df to csv. The heading will start as ','. Then first row will have 0 as 1st element and it goes on to 19 since it has 20 rows

Currently as index=false. It gives values as:
Patient Name,Weights (kg),Heights (cm)  
Mr. Jeffery Faulkner DDS,46,199  
Christopher Sanders,88,199  
Mrs. Jessica Carson,62,152  
...  
In the CSV it will reflect same

But, if index=true. The values would be:
',' ,Patient Name,Weights (kg),Heights (cm)  
0,Mr. Jeffery Faulkner DDS,46,199  
1,Christopher Sanders,88,199  
2,Mrs. Jessica Carson,62,152  
...  
In the CSV it will reflect an extra column as mentioned above

### Step 2: Read the csv and extract columns as Numpy arrays
"""

df = pd.read_csv("patients_data.csv")

print(df.head())

patient_names = df["Patient Name"].values  # String array
patient_weights = df["Weights (kg)"].values  # Float/Int array
patient_heights = df["Heights (cm)"].values  # Float array
patient_heights_m = patient_heights / 100

print('Patients names are:',patient_names[:5])
print('Patients weights are:',patient_weights[:5])
print('Patients heights are:',patient_heights_m[:5])

"""### Step 3: Calculate BMI for the whole array"""

bmi = patient_weights / (patient_heights_m ** 2)
print(bmi)

"""### Step 4: Categorize BMI ranges for the population using np.where()"""

# Step 4: Categorize BMI using np.where()
categories = np.where(bmi < 18.5, "Underweight",
              np.where(bmi < 25, "Normal",
              np.where(bmi < 30, "Overweight", "Obese")))

# Step 4: Calculate category counts & percentages
labels, counts = np.unique(categories, return_counts=True)
percentages = (counts / len(categories)) * 100

"""### Step 5: Display Results"""

# Step 7: Display results
print("=== Patient BMI Categories ===")
for name, b, cat in zip(patient_names, bmi, categories):
    print(f"{name}: BMI={b:.2f} â†’ {cat}")

print("\n=== Category Distribution ===")
for label, count, perc in zip(labels, counts, percentages):
    print(f"{label}: {count} patients ({perc:.1f}%)")